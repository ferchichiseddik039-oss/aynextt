const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ Configuration MongoDB Atlas pour votre boutique de v√™tements');
console.log('=============================================================\n');

// Fonction pour poser une question
function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// Fonction principale de configuration
async function setupMongoDBAtlas() {
  try {
    console.log('üìã Instructions de configuration MongoDB Atlas :\n');
    
    console.log('1Ô∏è‚É£  Allez sur : https://www.mongodb.com/atlas');
    console.log('2Ô∏è‚É£  Cr√©ez un compte gratuit');
    console.log('3Ô∏è‚É£  Cr√©ez un cluster M0 (gratuit)');
    console.log('4Ô∏è‚É£  Configurez un utilisateur de base de donn√©es');
    console.log('5Ô∏è‚É£  Autorisez l\'acc√®s r√©seau (0.0.0.0/0)');
    console.log('6Ô∏è‚É£  Obtenez l\'URI de connexion\n');
    
    console.log('‚è≥ Une fois ces √©tapes termin√©es, nous configurerons votre application...\n');
    
    // Demander l'URI MongoDB Atlas
    const mongoURI = await askQuestion('üîó Collez votre URI MongoDB Atlas ici : ');
    
    if (!mongoURI || mongoURI.trim() === '') {
      console.log('‚ùå URI non fournie. Configuration annul√©e.');
      rl.close();
      return;
    }
    
    // V√©rifier le format de l'URI
    if (!mongoURI.includes('mongodb+srv://')) {
      console.log('‚ö†Ô∏è  Attention : L\'URI ne semble pas √™tre au bon format MongoDB Atlas');
      console.log('   Format attendu : mongodb+srv://username:password@cluster...');
      
      const continueAnyway = await askQuestion('Voulez-vous continuer quand m√™me ? (y/n) : ');
      if (continueAnyway.toLowerCase() !== 'y' && continueAnyway.toLowerCase() !== 'yes') {
        console.log('‚ùå Configuration annul√©e.');
        rl.close();
        return;
      }
    }
    
    // Mettre √† jour le fichier .env
    const envPath = path.join(__dirname, '.env');
    let envContent = '';
    
    if (fs.existsSync(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf8');
    }
    
    // Ajouter ou mettre √† jour MONGODB_URI
    if (envContent.includes('MONGODB_URI=')) {
      envContent = envContent.replace(/MONGODB_URI=.*/g, `MONGODB_URI=${mongoURI}`);
    } else {
      envContent += `\nMONGODB_URI=${mongoURI}`;
    }
    
    // √âcrire le fichier .env
    fs.writeFileSync(envPath, envContent.trim());
    console.log('‚úÖ Fichier .env mis √† jour avec succ√®s !');
    
    // Tester la connexion
    console.log('\nüß™ Test de la connexion MongoDB Atlas...');
    
    // Importer et tester la connexion
    const { testMongoDBAtlas } = require('./test-mongodb-atlas');
    await testMongoDBAtlas();
    
    console.log('\nüéâ Configuration MongoDB Atlas termin√©e avec succ√®s !');
    console.log('üöÄ Vous pouvez maintenant d√©marrer votre serveur avec : npm run dev');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration :', error.message);
  } finally {
    rl.close();
  }
}

// D√©marrer la configuration
setupMongoDBAtlas();
