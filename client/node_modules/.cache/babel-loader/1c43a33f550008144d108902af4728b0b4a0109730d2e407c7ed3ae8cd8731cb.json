{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\houda\\\\OneDrive\\\\Bureau\\\\boutique-vetements\\\\client\\\\src\\\\contexts\\\\OrdersContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../config/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrdersContext = /*#__PURE__*/createContext();\nexport const useOrders = () => {\n  _s();\n  const context = useContext(OrdersContext);\n  if (!context) {\n    throw new Error('useOrders must be used within an OrdersProvider');\n  }\n  return context;\n};\n_s(useOrders, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const OrdersProvider = ({\n  children\n}) => {\n  _s2();\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fonction pour récupérer les commandes de l'utilisateur\n  const fetchOrders = async () => {\n    try {\n      var _response$data;\n      setLoading(true);\n      setError(null);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.log('🔑 Pas de token d\\'authentification');\n        setOrders([]);\n        setLoading(false);\n        setError('Veuillez vous connecter pour voir vos commandes');\n        return;\n      }\n\n      // Vérifier si le token est valide\n      try {\n        const tokenParts = token.split('.');\n        if (tokenParts.length === 3) {\n          const payload = JSON.parse(atob(tokenParts[1]));\n          const currentTime = Math.floor(Date.now() / 1000);\n          if (payload.exp && payload.exp < currentTime) {\n            console.log('⏰ Token expiré');\n            localStorage.removeItem('token');\n            setOrders([]);\n            setLoading(false);\n            setError('Session expirée - Veuillez vous reconnecter');\n            return;\n          }\n        }\n      } catch (tokenError) {\n        console.log('❌ Token invalide:', tokenError.message);\n        localStorage.removeItem('token');\n        setOrders([]);\n        setLoading(false);\n        setError('Token invalide - Veuillez vous reconnecter');\n        return;\n      }\n      console.log('📤 Récupération des commandes...');\n\n      // Timeout de sécurité pour éviter le blocage\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Timeout de sécurité (8 secondes)')), 8000);\n      });\n\n      // Essayer d'abord avec axios\n      let response;\n      try {\n        response = await Promise.race([api.get('/api/orders', {\n          headers: {\n            'x-auth-token': token\n          }\n        }), timeoutPromise]);\n      } catch (axiosError) {\n        console.log('⚠️ Erreur axios, essai avec fetch...', axiosError.message);\n\n        // Fallback avec fetch\n        try {\n          const fetchResponse = await Promise.race([fetch('http://localhost:5000/api/orders', {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'x-auth-token': token\n            }\n          }), timeoutPromise]);\n          if (!fetchResponse.ok) {\n            throw new Error(`HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);\n          }\n          const fetchData = await fetchResponse.json();\n          response = {\n            data: fetchData\n          };\n          console.log('✅ Récupération réussie avec fetch');\n        } catch (fetchError) {\n          throw fetchError;\n        }\n      }\n      console.log('📥 Réponse des commandes:', response.data);\n      console.log('📊 Type de réponse:', typeof response.data);\n      console.log('📊 Est un tableau:', Array.isArray(response.data));\n      console.log('📊 Longueur:', (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length);\n\n      // Le serveur retourne directement le tableau des commandes\n      let orders = [];\n      if (Array.isArray(response.data)) {\n        orders = response.data;\n      } else if (response.data && Array.isArray(response.data.commandes)) {\n        orders = response.data.commandes;\n      } else if (response.data && Array.isArray(response.data.orders)) {\n        orders = response.data.orders;\n      } else if (response.data && response.data.data && Array.isArray(response.data.data)) {\n        orders = response.data.data;\n      }\n      console.log('📋 Commandes finales:', orders);\n      setOrders(orders);\n      console.log(`✅ ${orders.length} commande(s) chargée(s)`);\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3;\n      console.error('❌ Erreur lors du chargement des commandes:', error);\n      let errorMessage = 'Erreur lors du chargement des commandes';\n      if (error.code === 'ECONNABORTED') {\n        errorMessage = 'Timeout: Le serveur met trop de temps à répondre';\n      } else if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n        errorMessage = 'Route non trouvée';\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n        errorMessage = 'Non autorisé - Veuillez vous reconnecter';\n      } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n        errorMessage = 'Erreur serveur - Veuillez réessayer plus tard';\n      } else if (!error.response) {\n        errorMessage = 'Impossible de contacter le serveur';\n      }\n      setError(errorMessage);\n      setOrders([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fonction pour ajouter une nouvelle commande\n  const addOrder = newOrder => {\n    setOrders(prevOrders => [newOrder, ...prevOrders]);\n  };\n\n  // Fonction pour mettre à jour le statut d'une commande\n  const updateOrderStatus = (orderId, newStatus) => {\n    setOrders(prevOrders => prevOrders.map(order => order._id === orderId ? {\n      ...order,\n      statut: newStatus\n    } : order));\n  };\n\n  // Fonction pour obtenir le nombre de commandes\n  const getOrdersCount = () => {\n    return orders.length;\n  };\n\n  // Fonction pour obtenir les commandes par statut\n  const getOrdersByStatus = status => {\n    return orders.filter(order => order.statut === status);\n  };\n\n  // Charger les commandes au montage du composant\n  useEffect(() => {\n    fetchOrders();\n  }, []);\n  const value = {\n    orders,\n    loading,\n    error,\n    fetchOrders,\n    addOrder,\n    updateOrderStatus,\n    getOrdersCount,\n    getOrdersByStatus\n  };\n  return /*#__PURE__*/_jsxDEV(OrdersContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s2(OrdersProvider, \"NvRvzRo6fN35U/te/Upk6+qZnyE=\");\n_c = OrdersProvider;\nexport default OrdersContext;\nvar _c;\n$RefreshReg$(_c, \"OrdersProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","OrdersContext","useOrders","_s","context","Error","OrdersProvider","children","_s2","orders","setOrders","loading","setLoading","error","setError","fetchOrders","_response$data","token","localStorage","getItem","console","log","tokenParts","split","length","payload","JSON","parse","atob","currentTime","Math","floor","Date","now","exp","removeItem","tokenError","message","timeoutPromise","Promise","_","reject","setTimeout","response","race","get","headers","axiosError","fetchResponse","fetch","method","ok","status","statusText","fetchData","json","data","fetchError","Array","isArray","commandes","_error$response","_error$response2","_error$response3","errorMessage","code","addOrder","newOrder","prevOrders","updateOrderStatus","orderId","newStatus","map","order","_id","statut","getOrdersCount","getOrdersByStatus","filter","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/houda/OneDrive/Bureau/boutique-vetements/client/src/contexts/OrdersContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../config/axios';\r\n\r\nconst OrdersContext = createContext();\r\n\r\nexport const useOrders = () => {\r\n  const context = useContext(OrdersContext);\r\n  if (!context) {\r\n    throw new Error('useOrders must be used within an OrdersProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const OrdersProvider = ({ children }) => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fonction pour récupérer les commandes de l'utilisateur\r\n  const fetchOrders = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.log('🔑 Pas de token d\\'authentification');\r\n        setOrders([]);\r\n        setLoading(false);\r\n        setError('Veuillez vous connecter pour voir vos commandes');\r\n        return;\r\n      }\r\n\r\n      // Vérifier si le token est valide\r\n      try {\r\n        const tokenParts = token.split('.');\r\n        if (tokenParts.length === 3) {\r\n          const payload = JSON.parse(atob(tokenParts[1]));\r\n          const currentTime = Math.floor(Date.now() / 1000);\r\n          if (payload.exp && payload.exp < currentTime) {\r\n            console.log('⏰ Token expiré');\r\n            localStorage.removeItem('token');\r\n            setOrders([]);\r\n            setLoading(false);\r\n            setError('Session expirée - Veuillez vous reconnecter');\r\n            return;\r\n          }\r\n        }\r\n      } catch (tokenError) {\r\n        console.log('❌ Token invalide:', tokenError.message);\r\n        localStorage.removeItem('token');\r\n        setOrders([]);\r\n        setLoading(false);\r\n        setError('Token invalide - Veuillez vous reconnecter');\r\n        return;\r\n      }\r\n\r\n      console.log('📤 Récupération des commandes...');\r\n      \r\n      // Timeout de sécurité pour éviter le blocage\r\n      const timeoutPromise = new Promise((_, reject) => {\r\n        setTimeout(() => reject(new Error('Timeout de sécurité (8 secondes)')), 8000);\r\n      });\r\n\r\n      // Essayer d'abord avec axios\r\n      let response;\r\n      try {\r\n        response = await Promise.race([\r\n          api.get('/api/orders', {\r\n            headers: {\r\n              'x-auth-token': token\r\n            }\r\n          }),\r\n          timeoutPromise\r\n        ]);\r\n      } catch (axiosError) {\r\n        console.log('⚠️ Erreur axios, essai avec fetch...', axiosError.message);\r\n        \r\n        // Fallback avec fetch\r\n        try {\r\n          const fetchResponse = await Promise.race([\r\n            fetch('http://localhost:5000/api/orders', {\r\n              method: 'GET',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-auth-token': token\r\n              }\r\n            }),\r\n            timeoutPromise\r\n          ]);\r\n          \r\n          if (!fetchResponse.ok) {\r\n            throw new Error(`HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);\r\n          }\r\n          \r\n          const fetchData = await fetchResponse.json();\r\n          response = { data: fetchData };\r\n          console.log('✅ Récupération réussie avec fetch');\r\n        } catch (fetchError) {\r\n          throw fetchError;\r\n        }\r\n      }\r\n\r\n      console.log('📥 Réponse des commandes:', response.data);\r\n      console.log('📊 Type de réponse:', typeof response.data);\r\n      console.log('📊 Est un tableau:', Array.isArray(response.data));\r\n      console.log('📊 Longueur:', response.data?.length);\r\n      \r\n      // Le serveur retourne directement le tableau des commandes\r\n      let orders = [];\r\n      \r\n      if (Array.isArray(response.data)) {\r\n        orders = response.data;\r\n      } else if (response.data && Array.isArray(response.data.commandes)) {\r\n        orders = response.data.commandes;\r\n      } else if (response.data && Array.isArray(response.data.orders)) {\r\n        orders = response.data.orders;\r\n      } else if (response.data && response.data.data && Array.isArray(response.data.data)) {\r\n        orders = response.data.data;\r\n      }\r\n      \r\n      console.log('📋 Commandes finales:', orders);\r\n      setOrders(orders);\r\n      \r\n      console.log(`✅ ${orders.length} commande(s) chargée(s)`);\r\n    } catch (error) {\r\n      console.error('❌ Erreur lors du chargement des commandes:', error);\r\n      \r\n      let errorMessage = 'Erreur lors du chargement des commandes';\r\n      \r\n      if (error.code === 'ECONNABORTED') {\r\n        errorMessage = 'Timeout: Le serveur met trop de temps à répondre';\r\n      } else if (error.response?.status === 404) {\r\n        errorMessage = 'Route non trouvée';\r\n      } else if (error.response?.status === 401) {\r\n        errorMessage = 'Non autorisé - Veuillez vous reconnecter';\r\n      } else if (error.response?.status >= 500) {\r\n        errorMessage = 'Erreur serveur - Veuillez réessayer plus tard';\r\n      } else if (!error.response) {\r\n        errorMessage = 'Impossible de contacter le serveur';\r\n      }\r\n      \r\n      setError(errorMessage);\r\n      setOrders([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fonction pour ajouter une nouvelle commande\r\n  const addOrder = (newOrder) => {\r\n    setOrders(prevOrders => [newOrder, ...prevOrders]);\r\n  };\r\n\r\n  // Fonction pour mettre à jour le statut d'une commande\r\n  const updateOrderStatus = (orderId, newStatus) => {\r\n    setOrders(prevOrders => \r\n      prevOrders.map(order => \r\n        order._id === orderId \r\n          ? { ...order, statut: newStatus }\r\n          : order\r\n      )\r\n    );\r\n  };\r\n\r\n  // Fonction pour obtenir le nombre de commandes\r\n  const getOrdersCount = () => {\r\n    return orders.length;\r\n  };\r\n\r\n  // Fonction pour obtenir les commandes par statut\r\n  const getOrdersByStatus = (status) => {\r\n    return orders.filter(order => order.statut === status);\r\n  };\r\n\r\n  // Charger les commandes au montage du composant\r\n  useEffect(() => {\r\n    fetchOrders();\r\n  }, []);\r\n\r\n  const value = {\r\n    orders,\r\n    loading,\r\n    error,\r\n    fetchOrders,\r\n    addOrder,\r\n    updateOrderStatus,\r\n    getOrdersCount,\r\n    getOrdersByStatus\r\n  };\r\n\r\n  return (\r\n    <OrdersContext.Provider value={value}>\r\n      {children}\r\n    </OrdersContext.Provider>\r\n  );\r\n};\r\n\r\nexport default OrdersContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}