{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\houda\\\\OneDrive\\\\Bureau\\\\boutique-vetements\\\\client\\\\src\\\\contexts\\\\SettingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../config/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\nexport const useSettings = () => {\n  _s();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n_s(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s2();\n  const [settings, setSettings] = useState({\n    informationsGenerales: {\n      nomBoutique: 'AYNEXT',\n      description: 'Boutique de vêtements tendance',\n      email: 'contact@shadowhood.com',\n      telephone: '+216 XX XXX XXX',\n      adresse: {\n        rue: 'Rue de la Mode',\n        ville: 'Tunis',\n        codePostal: '1000',\n        pays: 'Tunisie'\n      },\n      logo: ''\n    },\n    livraison: {\n      fraisLivraison: 5.9,\n      fraisLivraisonGratuite: 100,\n      delaiLivraison: '3-5 jours ouvrables',\n      zonesLivraison: [],\n      livraisonGratuite: true\n    },\n    paiement: {\n      methodesActives: ['carte', 'paypal', 'virement', 'especes'],\n      informationsPaiement: {\n        carte: {\n          active: true,\n          nom: 'Carte bancaire',\n          description: 'Visa, Mastercard, American Express'\n        },\n        paypal: {\n          active: true,\n          nom: 'PayPal',\n          description: 'Paiement sécurisé via PayPal'\n        },\n        virement: {\n          active: true,\n          nom: 'Virement bancaire',\n          description: 'Virement bancaire direct'\n        },\n        especes: {\n          active: true,\n          nom: 'Espèces à la livraison',\n          description: 'Paiement en espèces lors de la livraison'\n        }\n      }\n    },\n    general: {\n      devise: 'TND',\n      langue: 'fr',\n      maintenance: {\n        active: false,\n        message: 'Site en maintenance. Revenez bientôt !'\n      }\n    }\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Charger les paramètres au démarrage\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n  const fetchSettings = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.get('/api/settings');\n      setSettings(response.data);\n    } catch (error) {\n      console.error('Erreur lors du chargement des paramètres:', error);\n      setError('Erreur lors du chargement des paramètres');\n      // Garder les paramètres par défaut en cas d'erreur\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fonction pour obtenir les méthodes de paiement actives\n  const getActivePaymentMethods = () => {\n    if (!settings.paiement || !settings.paiement.methodesActives) {\n      return ['carte', 'paypal', 'virement', 'especes'];\n    }\n    return settings.paiement.methodesActives.map(method => {\n      var _settings$paiement$in, _settings$paiement$in2;\n      return {\n        value: method,\n        label: ((_settings$paiement$in = settings.paiement.informationsPaiement[method]) === null || _settings$paiement$in === void 0 ? void 0 : _settings$paiement$in.nom) || method,\n        description: ((_settings$paiement$in2 = settings.paiement.informationsPaiement[method]) === null || _settings$paiement$in2 === void 0 ? void 0 : _settings$paiement$in2.description) || ''\n      };\n    });\n  };\n\n  // Fonction pour calculer les frais de livraison\n  const calculateDeliveryFees = subtotal => {\n    if (!settings.livraison) {\n      return 5.9; // Valeur par défaut\n    }\n    const {\n      fraisLivraison,\n      fraisLivraisonGratuite,\n      livraisonGratuite\n    } = settings.livraison;\n\n    // Si la livraison gratuite est activée et le montant atteint le seuil\n    if (livraisonGratuite && subtotal >= fraisLivraisonGratuite) {\n      return 0;\n    }\n    return fraisLivraison;\n  };\n\n  // Fonction pour obtenir les informations de livraison\n  const getDeliveryInfo = () => {\n    if (!settings.livraison) {\n      return {\n        frais: 5.9,\n        delai: '3-5 jours ouvrables',\n        livraisonGratuite: true,\n        seuil: 100\n      };\n    }\n    return {\n      frais: settings.livraison.fraisLivraison,\n      delai: settings.livraison.delaiLivraison,\n      livraisonGratuite: settings.livraison.livraisonGratuite,\n      seuil: settings.livraison.fraisLivraisonGratuite\n    };\n  };\n\n  // Fonction pour vérifier si le site est en maintenance\n  const isMaintenanceMode = () => {\n    var _settings$general, _settings$general$mai;\n    return ((_settings$general = settings.general) === null || _settings$general === void 0 ? void 0 : (_settings$general$mai = _settings$general.maintenance) === null || _settings$general$mai === void 0 ? void 0 : _settings$general$mai.active) || false;\n  };\n\n  // Fonction pour obtenir le message de maintenance\n  const getMaintenanceMessage = () => {\n    var _settings$general2, _settings$general2$ma;\n    return ((_settings$general2 = settings.general) === null || _settings$general2 === void 0 ? void 0 : (_settings$general2$ma = _settings$general2.maintenance) === null || _settings$general2$ma === void 0 ? void 0 : _settings$general2$ma.message) || 'Site en maintenance. Revenez bientôt !';\n  };\n\n  // Fonction pour obtenir la devise\n  const getCurrency = () => {\n    var _settings$general3;\n    return ((_settings$general3 = settings.general) === null || _settings$general3 === void 0 ? void 0 : _settings$general3.devise) || 'TND';\n  };\n\n  // Fonction pour obtenir la langue\n  const getLanguage = () => {\n    var _settings$general4;\n    return ((_settings$general4 = settings.general) === null || _settings$general4 === void 0 ? void 0 : _settings$general4.langue) || 'fr';\n  };\n\n  // Fonction pour obtenir les informations de la boutique\n  const getShopInfo = () => {\n    return settings.informationsGenerales || {\n      nomBoutique: 'SHADOWHOOD',\n      description: 'Boutique de vêtements tendance',\n      email: 'contact@shadowhood.com',\n      telephone: '+216 XX XXX XXX'\n    };\n  };\n\n  // Fonction pour mettre à jour les paramètres (pour les admins)\n  const updateSettings = async newSettings => {\n    try {\n      setError(null);\n      const response = await api.put('/api/settings', newSettings);\n      setSettings(response.data.settings);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Erreur lors de la mise à jour des paramètres:', error);\n      setError('Erreur lors de la mise à jour des paramètres');\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Erreur inconnue'\n      };\n    }\n  };\n  const value = {\n    settings,\n    loading,\n    error,\n    fetchSettings,\n    getActivePaymentMethods,\n    calculateDeliveryFees,\n    getDeliveryInfo,\n    isMaintenanceMode,\n    getMaintenanceMessage,\n    getCurrency,\n    getLanguage,\n    getShopInfo,\n    updateSettings\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s2(SettingsProvider, \"soSLNcN4kcIFNC7fy64DETKeYdc=\");\n_c = SettingsProvider;\nexport default SettingsContext;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","SettingsContext","useSettings","_s","context","Error","SettingsProvider","children","_s2","settings","setSettings","informationsGenerales","nomBoutique","description","email","telephone","adresse","rue","ville","codePostal","pays","logo","livraison","fraisLivraison","fraisLivraisonGratuite","delaiLivraison","zonesLivraison","livraisonGratuite","paiement","methodesActives","informationsPaiement","carte","active","nom","paypal","virement","especes","general","devise","langue","maintenance","message","loading","setLoading","error","setError","fetchSettings","response","get","data","console","getActivePaymentMethods","map","method","_settings$paiement$in","_settings$paiement$in2","value","label","calculateDeliveryFees","subtotal","getDeliveryInfo","frais","delai","seuil","isMaintenanceMode","_settings$general","_settings$general$mai","getMaintenanceMessage","_settings$general2","_settings$general2$ma","getCurrency","_settings$general3","getLanguage","_settings$general4","getShopInfo","updateSettings","newSettings","put","success","_error$response","_error$response$data","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/houda/OneDrive/Bureau/boutique-vetements/client/src/contexts/SettingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../config/axios';\r\n\r\nconst SettingsContext = createContext();\r\n\r\nexport const useSettings = () => {\r\n  const context = useContext(SettingsContext);\r\n  if (!context) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SettingsProvider = ({ children }) => {\r\n  const [settings, setSettings] = useState({\r\n    informationsGenerales: {\r\n      nomBoutique: 'AYNEXT',\r\n      description: 'Boutique de vêtements tendance',\r\n      email: 'contact@shadowhood.com',\r\n      telephone: '+216 XX XXX XXX',\r\n      adresse: {\r\n        rue: 'Rue de la Mode',\r\n        ville: 'Tunis',\r\n        codePostal: '1000',\r\n        pays: 'Tunisie'\r\n      },\r\n      logo: ''\r\n    },\r\n    livraison: {\r\n      fraisLivraison: 5.9,\r\n      fraisLivraisonGratuite: 100,\r\n      delaiLivraison: '3-5 jours ouvrables',\r\n      zonesLivraison: [],\r\n      livraisonGratuite: true\r\n    },\r\n    paiement: {\r\n      methodesActives: ['carte', 'paypal', 'virement', 'especes'],\r\n      informationsPaiement: {\r\n        carte: {\r\n          active: true,\r\n          nom: 'Carte bancaire',\r\n          description: 'Visa, Mastercard, American Express'\r\n        },\r\n        paypal: {\r\n          active: true,\r\n          nom: 'PayPal',\r\n          description: 'Paiement sécurisé via PayPal'\r\n        },\r\n        virement: {\r\n          active: true,\r\n          nom: 'Virement bancaire',\r\n          description: 'Virement bancaire direct'\r\n        },\r\n        especes: {\r\n          active: true,\r\n          nom: 'Espèces à la livraison',\r\n          description: 'Paiement en espèces lors de la livraison'\r\n        }\r\n      }\r\n    },\r\n    general: {\r\n      devise: 'TND',\r\n      langue: 'fr',\r\n      maintenance: {\r\n        active: false,\r\n        message: 'Site en maintenance. Revenez bientôt !'\r\n      }\r\n    }\r\n  });\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Charger les paramètres au démarrage\r\n  useEffect(() => {\r\n    fetchSettings();\r\n  }, []);\r\n\r\n  const fetchSettings = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await api.get('/api/settings');\r\n      setSettings(response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des paramètres:', error);\r\n      setError('Erreur lors du chargement des paramètres');\r\n      // Garder les paramètres par défaut en cas d'erreur\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fonction pour obtenir les méthodes de paiement actives\r\n  const getActivePaymentMethods = () => {\r\n    if (!settings.paiement || !settings.paiement.methodesActives) {\r\n      return ['carte', 'paypal', 'virement', 'especes'];\r\n    }\r\n    \r\n    return settings.paiement.methodesActives.map(method => ({\r\n      value: method,\r\n      label: settings.paiement.informationsPaiement[method]?.nom || method,\r\n      description: settings.paiement.informationsPaiement[method]?.description || ''\r\n    }));\r\n  };\r\n\r\n  // Fonction pour calculer les frais de livraison\r\n  const calculateDeliveryFees = (subtotal) => {\r\n    if (!settings.livraison) {\r\n      return 5.9; // Valeur par défaut\r\n    }\r\n\r\n    const { fraisLivraison, fraisLivraisonGratuite, livraisonGratuite } = settings.livraison;\r\n    \r\n    // Si la livraison gratuite est activée et le montant atteint le seuil\r\n    if (livraisonGratuite && subtotal >= fraisLivraisonGratuite) {\r\n      return 0;\r\n    }\r\n    \r\n    return fraisLivraison;\r\n  };\r\n\r\n  // Fonction pour obtenir les informations de livraison\r\n  const getDeliveryInfo = () => {\r\n    if (!settings.livraison) {\r\n      return {\r\n        frais: 5.9,\r\n        delai: '3-5 jours ouvrables',\r\n        livraisonGratuite: true,\r\n        seuil: 100\r\n      };\r\n    }\r\n\r\n    return {\r\n      frais: settings.livraison.fraisLivraison,\r\n      delai: settings.livraison.delaiLivraison,\r\n      livraisonGratuite: settings.livraison.livraisonGratuite,\r\n      seuil: settings.livraison.fraisLivraisonGratuite\r\n    };\r\n  };\r\n\r\n  // Fonction pour vérifier si le site est en maintenance\r\n  const isMaintenanceMode = () => {\r\n    return settings.general?.maintenance?.active || false;\r\n  };\r\n\r\n  // Fonction pour obtenir le message de maintenance\r\n  const getMaintenanceMessage = () => {\r\n    return settings.general?.maintenance?.message || 'Site en maintenance. Revenez bientôt !';\r\n  };\r\n\r\n  // Fonction pour obtenir la devise\r\n  const getCurrency = () => {\r\n    return settings.general?.devise || 'TND';\r\n  };\r\n\r\n  // Fonction pour obtenir la langue\r\n  const getLanguage = () => {\r\n    return settings.general?.langue || 'fr';\r\n  };\r\n\r\n  // Fonction pour obtenir les informations de la boutique\r\n  const getShopInfo = () => {\r\n    return settings.informationsGenerales || {\r\n      nomBoutique: 'SHADOWHOOD',\r\n      description: 'Boutique de vêtements tendance',\r\n      email: 'contact@shadowhood.com',\r\n      telephone: '+216 XX XXX XXX'\r\n    };\r\n  };\r\n\r\n  // Fonction pour mettre à jour les paramètres (pour les admins)\r\n  const updateSettings = async (newSettings) => {\r\n    try {\r\n      setError(null);\r\n      const response = await api.put('/api/settings', newSettings);\r\n      setSettings(response.data.settings);\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour des paramètres:', error);\r\n      setError('Erreur lors de la mise à jour des paramètres');\r\n      return { success: false, error: error.response?.data?.message || 'Erreur inconnue' };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    settings,\r\n    loading,\r\n    error,\r\n    fetchSettings,\r\n    getActivePaymentMethods,\r\n    calculateDeliveryFees,\r\n    getDeliveryInfo,\r\n    isMaintenanceMode,\r\n    getMaintenanceMessage,\r\n    getCurrency,\r\n    getLanguage,\r\n    getShopInfo,\r\n    updateSettings\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={value}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SettingsContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}